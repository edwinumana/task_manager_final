# =============================================================================
# PIPELINE CI/CD PARA TASK MANAGER
# =============================================================================
# Este pipeline automatiza la construcción, prueba y despliegue de la aplicación
# Task Manager usando GitHub Actions, Docker y Docker Hub.

name: 🚀 Task Manager CI/CD Pipeline

# Triggers del pipeline
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite ejecución manual

# Variables de entorno globales
env:
  DOCKER_IMAGE: task-manager
  DOCKER_HUB_REPO: edwinumana/task-manager
  PYTHON_VERSION: '3.9'

jobs:
  # =============================================================================
  # JOB 1: TESTING
  # =============================================================================
  test:
    name: 🧪 Testing & Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit, integration, core]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('task_manager/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          default-libmysqlclient-dev \
          pkg-config \
          build-essential
          
    - name: 📦 Install Python Dependencies
      run: |
        cd task_manager
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist  # Para tests paralelos
        
    - name: 🧪 Run Tests - ${{ matrix.test-type }}
      run: |
        cd task_manager
        case "${{ matrix.test-type }}" in
          "unit")
            python -m pytest tests/ -m "unit" -v --tb=short
            ;;
          "integration")
            python -m pytest tests/ -m "integration" -v --tb=short
            ;;
          "core")
            python -m pytest tests/test_core_isolated.py tests/test_simple.py -v --tb=short
            ;;
        esac
        
    - name: 📊 Generate Coverage Report
      if: matrix.test-type == 'unit'
      run: |
        cd task_manager
        python -m pytest tests/ -m "unit" --cov=app --cov-report=html --cov-report=xml
        
    - name: 📤 Upload Coverage to Artifacts
      if: matrix.test-type == 'unit'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: task_manager/htmlcov/
        
    - name: 🔍 Code Quality Check
      if: matrix.test-type == 'unit'
      run: |
        cd task_manager
        # Verificar que la aplicación se puede importar
        python -c "from app import create_app; print('✅ Application imports successfully')"

  # =============================================================================
  # JOB 2: BUILD
  # =============================================================================
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔧 Build Docker Image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:latest .
        docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        
    - name: 🧪 Test Docker Image
      run: |
        # Iniciar contenedor en background
        docker run -d --name test-container -p 5000:5000 ${{ env.DOCKER_IMAGE }}:latest
        
        # Esperar a que el servicio esté listo
        timeout=30
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:5000/tasks >/dev/null 2>&1; then
            echo "✅ Application is responding"
            break
          fi
          echo "⏳ Waiting for application to start... ($timeout seconds left)"
          sleep 2
          timeout=$((timeout-2))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ Application failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Probar endpoints principales
        curl -f http://localhost:5000/tasks || exit 1
        curl -f http://localhost:5000/user-stories || exit 1
        
        # Limpiar
        docker stop test-container
        docker rm test-container
        
    - name: 💾 Save Docker Image
      run: |
        docker save ${{ env.DOCKER_IMAGE }}:latest | gzip > docker-image.tar.gz
        
    - name: 📤 Upload Docker Image Artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: docker-image.tar.gz
        retention-days: 1

  # =============================================================================
  # JOB 3: PUSH TO DOCKER HUB
  # =============================================================================
  push:
    name: 🚀 Push to Docker Hub
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Docker Image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🔧 Load and Tag Docker Image
      run: |
        gunzip -c docker-image.tar.gz | docker load
        
        # Crear tags múltiples
        docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_HUB_REPO }}:latest
        docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_HUB_REPO }}:${{ github.sha }}
        docker tag ${{ env.DOCKER_IMAGE }}:latest ${{ env.DOCKER_HUB_REPO }}:v${{ github.run_number }}
        
    - name: 🚀 Push to Docker Hub
      run: |
        docker push ${{ env.DOCKER_HUB_REPO }}:latest
        docker push ${{ env.DOCKER_HUB_REPO }}:${{ github.sha }}
        docker push ${{ env.DOCKER_HUB_REPO }}:v${{ github.run_number }}
        
    - name: 📝 Generate Docker Hub URL
      run: |
        echo "🐳 Docker image pushed successfully!"
        echo "📦 Available at: https://hub.docker.com/r/${{ env.DOCKER_HUB_REPO }}"
        echo "🏷️ Tags: latest, ${{ github.sha }}, v${{ github.run_number }}"

  # =============================================================================
  # JOB 4: DEPLOYMENT VERIFICATION
  # =============================================================================
  verify:
    name: ✅ Verify Deployment
    runs-on: ubuntu-latest
    needs: push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: 🐳 Pull and Test Image from Docker Hub
      run: |
        # Esperar un poco para que la imagen esté disponible
        sleep 30
        
        # Descargar imagen desde Docker Hub
        docker pull ${{ env.DOCKER_HUB_REPO }}:latest
        
        # Iniciar contenedor
        docker run -d --name verify-container -p 5000:5000 ${{ env.DOCKER_HUB_REPO }}:latest
        
        # Esperar a que el servicio esté listo
        timeout=60
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:5000/tasks >/dev/null 2>&1; then
            echo "✅ Deployment verification successful"
            break
          fi
          echo "⏳ Waiting for service... ($timeout seconds left)"
          sleep 3
          timeout=$((timeout-3))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ Deployment verification failed"
          docker logs verify-container
          exit 1
        fi
        
        # Probar endpoints principales
        curl -f http://localhost:5000/tasks
        curl -f http://localhost:5000/user-stories
        
        # Limpiar
        docker stop verify-container
        docker rm verify-container
        
    - name: 🎉 Deployment Success
      run: |
        echo "🎉 Pipeline completed successfully!"
        echo "✅ Tests passed"
        echo "✅ Docker image built"
        echo "✅ Image pushed to Docker Hub"
        echo "✅ Deployment verified"
        echo ""
        echo "🚀 Your application is ready!"
        echo "📦 Docker Hub: https://hub.docker.com/r/${{ env.DOCKER_HUB_REPO }}"
        echo "🐳 Run with: docker run -p 5000:5000 ${{ env.DOCKER_HUB_REPO }}:latest" 